
int A[N][N],I[N][N];
void mult(int I[][N],int A[][N],int dim){
	int res[dim+1][dim+1];
	FOR(i,1,dim+1){
		FOR(j,1,dim+1){
			res[i][j]=0;
			FOR(k,1,dim+1){
				res[i][j]+= I[i][k]*A[k][j];
			}
		}
	}
	FOR(i,1,dim+1){
		FOR(j,1,dim+1){
			I[i][j]=res[i][j];
		}
	}
}
void power(int A[][N],int dim, int n){
	FOR(i,1,dim+1){
		FOR(j,1,dim+1){
			if(i==j){I[i][j]=1;}
			else{I[i][j]=0;}
		}
	}
	while(n>0){
		if(n%2==0){
			mult(A,A,dim);
			n=n/2;
		}
		else{
			mult(I,A,dim);
			n--;
		}
	}
}

int dim,n;
cin>>dim>>n;
FOR(i,1,dim+1){.       // given matrix whose exponent is to be calculated
	FOR(j,1,dim+1){
		cin>>A[i][j];
	}
}
power(A,dim,n);        // calling power function and the exponentiated matrix is stored in I;
FOR(i,1,dim+1){
	FOR(j,1,dim+1){
		cout<<I[i][j]<<" ";
	}
	cout<<endl;
}

TIME COMPLEXITY
O(dim^3*(log(n))
