#include<bits/stdc++.h>
using namespace std;
#define       fr(i,n)       for(int i=1;i<=n;i++)
#define       long long     int lli
using namespace std;
#define       N             101
int A[N][N],I[N][N];
void mul(int I[N][N],int A [N][N],int dim)
{
    int res[dim+1][dim+1];
    fr(i,dim)
    {
        fr(j,dim)
        {
            res[i][j]=0;
            fr(k,dim)
            {
                res[i][j]+=I[i][k]*A[k][j]; // simple code for matrix multiplication
            }
        }
    }
    fr(i,dim) fr(j,dim) I[i][j]=res[i][j];  // copying back result to I from res matrix
}
void power(int A[][N],int dim, int n)
{
    fr(i,dim) fr(j,dim) // identity matrix of order dim
    {
        if(i==j) I[i][j]=1;
        else I[i][j]=0;
    }
//      fr(i,n)  mul(I,A,dim); // I=A*I  n times running or multiplying n times (THIS NAIVE APPROACH OF O((M^3)*N)
    while(n)
    {
        if(n%2==0)
        {
            mul(A,A,dim);n=n/2;
        }
        else if(n%2!=0)    // this is matrix exponentiataion   with O((m^3)*log n)
        {
            mul(I,A,dim);n--;
        }
    }
    fr(i,dim) fr(j,dim) A[i][j]=I[i][j];
    
}
void printMat(int A[][N],int dim)
{
    fr(i,dim)
    {
        fr(j,dim)
        {
            cout<<A[i][j]<<" ";
        }
        cout<<endl;
    }
}
int main()
{
    int dim,n;
    cin>>dim>>n;
    fr(i,dim) fr(j,dim)  cin>>A[i][j]; // input the matrix of order dim
    power(A,dim,n);         // calculating power of matrix
    printMat(A,dim);       // printing the resulted matrix
}

